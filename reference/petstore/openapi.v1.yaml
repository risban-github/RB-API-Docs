openapi: 3.0.0
info:
  version: 1.0.0
  title: Risban API Reference Docs
  license:
    name: MIT
    url: url
  description: This section will provide you with all APIs that you can use to integrate your system.
  contact:
    name: Rakesh
    email: rakesh@risban.com
servers:
  - url: 'https://dev.risban.com/api/v1'
    description: Development
  - description: Staging
    url: 'https://stage.risban.com/api/v1'
  - url: 'https://risban.com/api/v1'
    description: Live
paths:
  /user/login:
    post:
      summary: 2. User Login
      operationId: post-user-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  'A ':
                    $ref: ./models/login.v1.yaml
      description: "This is an API to login using registered email and password. \n\nOn successful validation of your email and password, Risban generates access_token which you need to put in the header to use other APIs."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john.smith@test-risban.com
                password:
                  type: string
                  format: password
                  example: 'HelloWorld!23'
                  pattern: '^[A-Za-z0-9 -_]+'
              required:
                - email
                - password
      tags:
        - Users
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer {{access_token}}'
      security: []
  /user/me:
    get:
      summary: 3.1 User - retrieve my user info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/user-me.v1.yaml
        '':
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: ./models/meta.v1.yaml
              examples:
                example-1: {}
      operationId: get-user-me
      description: Get own detail after login
      parameters:
        - schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiIwZGJjNTNkYi0zYTI2LTRjYzEtOWJjNy1hZTg4OWM3ODk0NDEiLCJlbWFpbElkIjoicmFrZXNoQHJpc2Jhbi5jb20iLCJmaXJzdE5hbWUiOiJSYWtlc2giLCJsYXN0TmFtZSI6IkJva2luYWxhIiwicGhvbmUiOiIrOTEgOTAxNzI1MjI5MSIsInBhc3N3b3JkIjoiMzUxNjVkMzUzODRmMTAyYzVmNGRiMjE4OWUzOGMzYmEzYjMyZjNlYzFjMTU0YTQzMzUxNjVkMzUzODRmIiwiaXNFbWFpbFZlcmlmZWQiOnRydWUsImlzT25ib2FyZGVkIjp0cnVlLCJsYXN0VXBkYXRlZERhdGUiOiIyMDIwLTA0LTA2VDE1OjAxOjA5LjUxMFoiLCJsYXN0VXBkYXRlZEJ5IjoiU3lzdGVtIiwiaXNBY3RpdmUiOnRydWUsImNyZWF0ZWREYXRlIjoiMjAyMC0wNC0wNlQxNTowMTowOS41MTBaIiwiY3JlYXRlZEJ5IjoiU3lzdGVtIiwiY3JlYXRlZE9uIjoiMjAyMC0wNS0wOVQyMjoyMTo1Ni42NzZaIiwiaWF0IjoxNTg5MDYyOTE2fQ.oBpJiDEcpn5MFKO_mLlByLGlJJ_2JnJ65hZRL9GiW4k
          in: header
          name: Authorization
          description: 'Bearer {{access_token}}'
          required: true
          style: 'Bearer {{access_token}}'
      tags:
        - Users
      security: []
    put:
      summary: 3.2 User - update my user info
      operationId: put-user-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/user-me.v1.yaml
      description: Update personal information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                middle_name:
                  type: string
                last_name:
                  type: string
                phone:
                  type: string
            examples:
              example-1: {}
        description: ''
      tags:
        - Users
    delete:
      summary: 3.3 User - delete my user info
      operationId: delete-user-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/user-me.v1.yaml
      description: 'This will inactivate user account. '
      tags:
        - Users
  /user/logout:
    post:
      summary: 4. Logout
      operationId: post-user-logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: ./models/meta.v1.yaml
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer {{access_token}}'
      tags:
        - Users
      description: 'user logout '
  /user/signup:
    post:
      summary: 1. User Sign-in
      operationId: post-user-signup
      responses:
        '200':
          description: OK
      tags:
        - Users
      description: sign up user
  /partners:
    get:
      summary: 2. Retrieve partner info
      tags:
        - partners
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: ./models/meta.v1.yaml
                  data:
                    $ref: ./models/partner-data.v1.json
      operationId: get-partners
      description: Retrieve partner information
    post:
      summary: 1. Create a partner
      operationId: post-partners
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: ./models/meta.v1.yaml
                  data:
                    $ref: ./models/partner-data.v1.json
      description: Onboard as a partner
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/partner-data.v1.json
      tags:
        - partners
    put:
      summary: 3. Update a partner
      operationId: put-partners
      responses:
        '200':
          description: OK
      tags:
        - partners
      description: partner update
    delete:
      summary: 4. Delete a partner
      operationId: delete-partners
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    $ref: ./models/meta.v1.yaml
                  data:
                    type: string
      tags:
        - partners
      description: delete a partner
    parameters: []
components:
  schemas: {}
  securitySchemes: {}
